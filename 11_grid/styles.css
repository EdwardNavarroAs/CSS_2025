/* Capítulo 07 - CSS Grid */

/* Estilo general para todos los ítems */
.item {
  background-color: #4caf50;
  color: white;
  font-weight: bold;
  text-align: center;
  padding: 20px;
  border-radius: 4px;
  font-size: 1.2rem;
}

/* 🟢 1. Activar Grid y definir columnas */
.grid-activada {
  display: grid;                        /* Activamos Grid */
  grid-template-columns: repeat(3, 1fr); /* 3 columnas del mismo tamaño */
  gap: 10px;                            /* Espacio entre ítems */
  margin-bottom: 30px;
}

/* 🟢 2. Añadir espacio con gap */
.grid-gap {
  display: grid;
  grid-template-columns: repeat(2, 1fr); /* 2 columnas */
  gap: 20px 40px;                        /* 20px entre filas, 40px entre columnas */
  margin-bottom: 30px;
}

/* 🟢 3. Definir filas explícitas */
.grid-filas {
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-template-rows: 50px 100px;       /* 2 filas de diferente altura */
  gap: 10px;
  margin-bottom: 30px;
}

/* 🟢 4. Posicionar elementos con líneas */
.grid-lineas {
  display: grid;
  grid-template-columns: repeat(3, 1fr);  /* Tres columnas iguales */
  grid-template-rows: repeat(3, 100px);   /* Tres filas de 100px cada una */
  gap: 10px;                              /* Espacio entre filas y columnas */
  margin-bottom: 30px;
}

.grid-lineas .a {
  grid-column: 1 / 4;  /* 🔹 Ocupa desde la línea 1 hasta la 4 (tres columnas completas) */

  /*
    Nota: si solo usáramos 1 / 3, el ítem A ocuparía solo dos columnas 
    (columna 1 y 2), dejando la columna 3 libre.

    En ese caso, el ítem C —que no tiene posición específica— se colocaría
    automáticamente en la primera celda libre, que sería la columna 3 de la fila 1.

    Para evitar esto y asegurarnos de que A ocupe toda la primera fila,
    usamos 1 / 4 (es decir, columnas 1, 2 y 3).
  */
}

.grid-lineas .b {
  grid-row: 2 / 4;  /* 🔹 Ocupa desde la fila 2 hasta la 4 (dos filas de alto) */
  /*
    B se colocará en la siguiente celda disponible (columna 1, fila 2),
    y ocupará también la fila 3 verticalmente.
  */
}

/*.grid-lineas .c {
  /* 🔹 No tiene posición explícita, así que se coloca automáticamente 
     en la siguiente celda libre: columna 1, fila 4 (si A ocupa toda la fila 1, 
     y B ocupa filas 2 y 3 en la columna 1) 
}*/

/* 🟢 5. Definir áreas con nombres */
.grid-areas {
  display: grid;
  grid-template-columns: 1fr 2fr;
  grid-template-rows: auto 1fr auto;
  grid-template-areas:
    "header  header"
    "sidebar main"
    "footer  footer";
  gap: 10px;
}

.header {
  grid-area: header;
  background-color: #1976d2;
}
.sidebar {
  grid-area: sidebar;
  background-color: #c2185b;
}
.main {
  grid-area: main;
  background-color: #00796b;
}
.footer {
  grid-area: footer;
  background-color: #512da8;
}

/* 🟢 6. Grid anidado y subgrid */
.grid-nested {
  display: grid;
  grid-template-columns: repeat(3, 1fr);  /* Tres columnas iguales */
  gap: 10px;
  margin-bottom: 30px;
}

/* Segundo ítem se convierte en un grid interno */
.nested-grid {
  display: grid;                          /* Activamos un grid dentro del hijo */
  grid-template-columns: 1fr 1fr;         /* Dos columnas internas */
  gap: 5px;
  padding: 10px;
  background-color: #f0f0f0;
  color: #333;
}

/* Estilo para los ítems internos */
.nested-item {
  background-color: #009688;
  color: white;
  text-align: center;
  padding: 10px;
  border-radius: 4px;
  font-weight: bold;
}

/*
  🔍 Nota: también existe `display: subgrid`, que permite a los elementos hijos
  heredar el sistema de líneas del contenedor padre. Sin embargo, aún no tiene
  soporte completo en todos los navegadores.

  Ejemplo:

  .subgrid-example {
    display: subgrid;
    grid-column: span 2;
  }
*/
